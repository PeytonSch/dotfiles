let mapleader="\<space>"

set wrap

" ------------
" Plugins
" ------------

" swap and exchange text plugin
set exchange
" comment plugin
set commentary
" replace text with contents from register
set ReplaceWithRegister
" surround plugin
set surround
" file explorer commands
set nerdtree
" highlight yanked text
set highlightedyank
" highlight targets for quick jumps
set quickscope
" tools for selecting entire buffer
set textobj-entire
" indenting tools
set indent-object
" manipulating function arguments
set argtextobj
" motion plugins
set sneak
set easymotion

" WhichKey
set which-key
set notimeout
let g:WhichKey_FontSize = 12
let g:WhichKey_PrefixColor = "#a403fe"
let g:WhichKey_CommandColor = "#01ffff"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "false"
let g:WhichKey_ShowVimActions = "true"

" ------------
" System Settings
" ------------

" use system clipboard for vim copy/paste
set clipboard+=unnamed
" set join command specific to vim
set ideajoin
" activate vim mark features
set ideamarks
" default refactor mode to normal
set idearefactormode=normal


" ------------
" General Settings
" ------------

" set timeoutlen=50
set scrolloff=10
set history=1000
set number relativenumber
" show vim mode
set showmode
" show vim commands as you type them
set showcmd
" case insensitive unless you use a capital letter
set smartcase
" incremental search
set incsearch
" highlight search
set hlsearch
" replace sound with flash
set visualbell

" highlight
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" ------------
" Keybinds
" ------------

" fuzzier
map <Leader>ff <action>(com.mituuz.fuzzier.Fuzzier)
map <Leader>fm <action>(com.mituuz.fuzzier.FuzzyMover)
map <Leader>fv <action>(com.mituuz.fuzzier.FuzzierVCS)
map <Leader>fg <action>(com.mituuz.fuzzier.FuzzyGrep)


nmap <C-p> <Action>(PreviousTab)
nmap <C-n> <Action>(NextTab)

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" Window Commands
nmap <leader>wv <Action>(SplitVertically)
nmap <leader>wh <Action>(SplitHorizontally)
nmap <leader>wu <Action>(Unsplit)
nmap <leader>wm <Action>(MoveEditorToOppositeTabGroup)
nmap <leader>wb <Action>(Back)
nmap <leader>wf <Action>(Forward)
let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_split_back = "<leader>wb Back split"
let g:WhichKeyDesc_window_split_forward = "<leader>wf Forward split"


" Tab Management
nmap <leader>tp <Action>(PinActiveEditorTab)
nmap <leader>tg1 <Action>(GoToTab1)
nmap <leader>tg2 <Action>(GoToTab2)
nmap <leader>tg3 <Action>(GoToTab3)
nmap <leader>tg4 <Action>(GoToTab4)
nmap <leader>tg5 <Action>(GoToTab5)
nmap <leader>tg6 <Action>(GoToTab6)
nmap <leader>tg7 <Action>(GoToTab7)
nmap <leader>tg8 <Action>(GoToTab8)
nmap <leader>tg9 <Action>(GoToTab9)
nmap <leader>tx <Action>(CloseContent)
nmap <leader>tX <Action>(CloseAllEditors)
nmap <leader>tA <Action>(CloseAllEditorsButActive)
nmap <leader>tP <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_tabs = "<leader>t Tabs"
let g:WhichKeyDesc_tabs_pin = "<leader>tp Pin Active Tab"
let g:WhichKeyDesc_tabs_go_to = "<leader>tg Go to Tab"
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>tg1 Go to Tab 1"
let g:WhichKeyDesc_tabs_go_to_2 = "<leader>tg2 Go to Tab 2"
let g:WhichKeyDesc_tabs_go_to_3 = "<leader>tg3 Go to Tab 3"
let g:WhichKeyDesc_tabs_go_to_4 = "<leader>tg4 Go to Tab 4"
let g:WhichKeyDesc_tabs_go_to_5 = "<leader>tg5 Go to Tab 5"
let g:WhichKeyDesc_tabs_go_to_6 = "<leader>tg6 Go to Tab 6"
let g:WhichKeyDesc_tabs_go_to_7 = "<leader>tg7 Go to Tab 7"
let g:WhichKeyDesc_tabs_go_to_8 = "<leader>tg8 Go to Tab 8"
let g:WhichKeyDesc_tabs_go_to_9 = "<leader>tg9 Go to Tab 9"
let g:WhichKeyDesc_tabs_close = "<leader>tx Close Current Tab"
let g:WhichKeyDesc_tabs_close_all = "<leader>tX Close All Tabs"
let g:WhichKeyDesc_tabs_close_all_but_active = "<leader>tA Close All Tabs But Active"
let g:WhichKeyDesc_tabs_close_all_unpinned = "<leader>tP Close All Unpinned Tabs"

" Display Mode
map <leader>Dd <Action>(ToggleDistractionFreeMode)
map <leader>Dz <Action>(ToggleZenMode)
map <leader>Df <Action>(ToggleFullScreen)
let g:WhichKeyDesc_display = "<leader>D Display options"
let g:WhichKeyDesc_zen_mode = "<leader>Dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>Dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>Df Toggle full screen"

" Copy Actions
nmap <leader>ya <Action>(CopyAbsolutePath)
nmap <leader>yy <Action>(CopyContentRootPath)

let g:WhichKeyDesc_copy_abs = "<leader>ya Copy absolute path"
let g:WhichKeyDesc_copy_root = "<leader>yy Copy from content root"

" Tasks/Tools
nmap <leader>Ts <Action>(tasks.switch)
nmap <leader>Tt <Action>(tasks.toolbar)
nmap <leader>Tp <Action>(ManageRecentProjects)
nmap <leader>Td <Action>(ActivateDatabaseToolWindow)
nmap <leader>Tg <Action>(Gradle.ExecuteTask)
nmap <leader>Th <Action>(HTTPClientGroup)
nmap <leader>Tii <Action>(InspectCode)
nmap <leader>Tin <Action>(RunInspection)

let g:WhichKeyDesc_tasks_switch = "<leader>Ts Task Switch"
let g:WhichKeyDesc_tasks_toolbar = "<leader>Tt Task toolbar"
let g:WhichKeyDesc_tools_projects = "<leader>Tp Recent Projects"
let g:WhichKeyDesc_tools_database = "<leader>Td Database Window"
let g:WhichKeyDesc_tools_gradle = "<leader>Td Gradle Window"
let g:WhichKeyDesc_tools_httpClient = "<leader>Th HTTP Client"
let g:WhichKeyDesc_tools_inspect_Code = "<leader>Tii inspect code"
let g:WhichKeyDesc_tools_run_inspect = "<leader>Tin Run Inspection by name"


" Files
"nmap <leader>fg <Action>(GotoFile)
nmap <leader>fr <Action>(RecentFiles)
nmap <leader>fc <Action>(FindInPath)
nmap <leader>fl <Action>(RecentLocations)
nmap <leader>fs <Action>(NewScratchFile)
nmap <leader>fe :NERDTreeToggle<CR>
nmap <leader>fo <Action>(OpenFile)
nmap <leader>fh <Action>(LocalHistory.ShowHistory)
"nmap <leader>ff <Action>(ShowFilePath)
nmap <leader>fi <Action>(SelectIn)
nmap <leader>fp <Action>(ReplaceInPath)
let g:WhichKeyDesc_file_opt = "<leader>f File navigation"
let g:WhichKeyDesc_file_opt_goto_file = "<leader>fg Go To File"
let g:WhichKeyDesc_file_opt_goto_content = "<leader>fc Find In Files"
let g:WhichKeyDesc_file_opt_show_recent_files = "<leader>fr Recent Files"
let g:WhichKeyDesc_file_opt_show_recent_locations = "<leader>fl Recent Locations"
let g:WhichKeyDesc_file_opt_new_scratch_file = "<leader>fs New Scratch File"
let g:WhichKeyDesc_file_opt_toggle_nerdtree = "<leader>fe Toggle NERDTree"
let g:WhichKeyDesc_file_opt_open_file = "<leader>fo Open File"
let g:WhichKeyDesc_file_opt_copy_path = "<leader>fy Copy Absolute Path"
let g:WhichKeyDesc_file_opt_recent_projects = "<leader>fp Manage Recent Projects"
let g:WhichKeyDesc_file_opt_history = "<leader>fh Show Local History"
let g:WhichKeyDesc_file_opt_show_path = "<leader>ff Show File Path"
let g:WhichKeyDesc_file_opt_select_in = "<leader>fi Select In"
let g:WhichKeyDesc_file_opt_replace_in_path = "<leader>fp Replace In Path"

" Run and Test
nmap <leader>rm <Action>(RunMenu)
nmap <leader>rn <Action>(RunClass)
nmap <leader>rc <Action>(ContextRun)
nmap <leader>rr <Action>(ChooseRunConfiguration)
nmap <leader>rt <Action>(RunTests)
nmap <leader>rf <Action>(RerunFailedTests)
nmap <leader>rs <Action>(Stop)
nmap <leader>rC <Action>(Rerun)
nmap <leader>rb <Action>(ActivateBuildToolWindow)

let g:WhichKeyDesc_run = "<leader>r Run"
let g:WhichKeyDesc_run_menu = "<leader>rm Run Menu"
let g:WhichKeyDesc_run_class = "<leader>rn Run Class"
let g:WhichKeyDesc_run_context = "<leader>rc Context Run"
let g:WhichKeyDesc_run_rerun = "<leader>rC Rerun"
let g:WhichKeyDesc_run_tests = "<leader>rt Run Tests"
let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed Tests"
let g:WhichKeyDesc_run_stop = "<leader>rs Stop"
let g:WhichKeyDesc_run_choose_configuration = "<leader>rr Choose Run Configuration"
let g:WhichKeyDesc_run_build_window = "<leader>rb Build Window"

" Debug
nmap <leader>dx <Action>(Debug)
nmap <leader>dc <Action>(ContextDebug)
nmap <leader>dv <Action>(ViewBreakpoints)
nmap <leader>db <Action>(ToggleLineBreakpoint)
nmap <leader>de <Action>(EditBreakpoint)
nmap <leader>dm <Action>(XDebugger.MuteBreakpoints)
nmap <leader>dt <Action>(ToggleLineBreakpoint)
nmap <leader>dC <Action>(RunToCursor)
nmap <leader>di <Action>(StepInto)
nmap <leader>do <Action>(StepOver)
nmap <leader>dr <Action>(Resume)
nmap <leader>dR <Action>(EvaluateExpression)
nmap <leader>dt <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_debugging = "<leader>d Debugging"
let g:WhichKeyDesc_debug_execute = "<leader>dx Execute Debug"
let g:WhichKeyDesc_debug_context = "<leader>dc Context Debug"
let g:WhichKeyDesc_debug_view_breakpoints = "<leader>dv View Breakpoints"
let g:WhichKeyDesc_debug_edit_breakpoints = "<leader>de Edit Breakpoints"
let g:WhichKeyDesc_debug_mute_breakpoints = "<leader>dm Mute Breakpoints"
let g:WhichKeyDesc_debug_toggle_line_breakpoint = "<leader>dt Toggle Line Breakpoint"
let g:WhichKeyDesc_debug_run_to_cursor = "<leader>dC Run to Cursor"
let g:WhichKeyDesc_debug_step_into = "<leader>di Step Into"
let g:WhichKeyDesc_debug_step_over = "<leader>do Step Over"
let g:WhichKeyDesc_debug_resume = "<leader>dr Resume Debugging"
let g:WhichKeyDesc_debug_evaluate_expression = "<leader>dR Evaluate Expression"
let g:WhichKeyDesc_debug_activate_tool_window = "<leader>dt Activate Debug Tool Window"

" Refactoring and editing
nmap <leader>ll <Action>(Refactorings.QuickListPopupAction)
nmap <leader>lr <Action>(RenameElement)
nmap <leader>lc <Action>(ChangeSignature)
nmap <leader>lv <Action>(IntroduceVariable)
nmap <leader>li <Action>(Inline)
nmap <leader>lf <Action>(IntroduceField)
nmap <leader>lm <Action>(ExtractMethod)
nmap <leader>lC <Action>(IntroduceConstant)
nmap <leader>lp <Action>(IntroduceParameter)
nmap <leader>lo <Action>(IntroduceParameterObject)
nmap <leader>le <Action>(EncapsulateFields)
nmap <leader>la <Action>(ShowIntentionActions)
nmap <leader>lR <Action>(ReformatCode)
nmap <leader>lI <Action>(InspectCode)
nmap <leader>lG <Action>(Generate)
nmap <leader>lt <Action>(RefactoringMenu)
let g:WhichKeyDesc_language = "<leader>l Language"
let g:WhichKeyDesc_language_menu = "<leader>ll Quick List"
let g:WhichKeyDesc_language_rename = "<leader>lr Rename"
let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"
let g:WhichKeyDesc_language_inline_variable = "<leader>li Inline"
let g:WhichKeyDesc_language_introduce_field = "<leader>lf Introduce Field"
let g:WhichKeyDesc_language_extract_method = "<leader>lm Extract Method"
let g:WhichKeyDesc_language_introduce_constant = "<leader>lC Introduce Constant"
let g:WhichKeyDesc_language_introduce_parameter = "<leader>lp Introduce Parameter"
let g:WhichKeyDesc_language_introduce_param_object = "<leader>lo Introduce Parameter Object"
let g:WhichKeyDesc_language_encapsulate = "<leader>le Encapsulate Fields"
let g:WhichKeyDesc_language_show_intention_actions = "<leader>la Show Intention Actions"
let g:WhichKeyDesc_language_reformat_code = "<leader>lR Reformat Code"
let g:WhichKeyDesc_language_inspect_code = "<leader>lI Inspect Code"
let g:WhichKeyDesc_language_generate = "<leader>lG Generate"
let g:WhichKeyDesc_language_menu = "<leader>lt Refactoring Menu"

" Bookmarks
nmap <leader>bm <Action>(Bookmarks)
nmap <leader>bs <Action>(ShowBookmarks)
nmap <leader>bt <Action>(ActivateBookmarksToolWindow)
nmap <leader>bb <Action>(ToggleBookmark)
nmap <leader>be <Action>(EditBookmark)
nmap <leader>bp <Action>(GotoPreviousBookmark)
nmap <leader>bn <Action>(GotoNextBookmark)
nmap <leader>bf <Action>(ToggleBookmarkWithMnemonic)
nmap <leader>bg <Action>(ShowTypeBookmarks)
nmap <leader>br <Action>(EditBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"
let g:WhichKeyDesc_bookmarks_mnemonic = "<leader>bf Bookmark Create Mnemonic"
let g:WhichKeyDesc_bookmarks_mnemonic_show = "<leader>bf Bookmark Show Mnemonic"
let g:WhichKeyDesc_bookmarks_rename = "<leader>br Rename Bookmark"

" Code Navigation
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>ge <Action>(GotoNextError)
nmap <leader>go <Action>(GotoSuperMethod)
nmap <leader>gD <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gT <Action>(GotoTest)
let g:WhichKeyDesc_goto = "<leader>g Go To"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go To Declaration"
let g:WhichKeyDesc_goto_super_method = "<leader>go Go To Super Method"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gD Go To Type Declaration"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go To Implementation"
let g:WhichKeyDesc_goto_test = "<leader>gT Go To Test"

" Search
nmap <leader>sS <action>(SearchEverywhere)
nmap <leader>su <Action>(FindUsages)
nmap <leader>sn <Action>(ShowNavBar)
nmap <leader>sa <Action>(GotoAction)
nmap <leader>sc <Action>(GotoClass)
nmap <leader>sf <Action>(GotoFile)
nmap <leader>ss <Action>(GotoSymbol)
nmap <leader>st <Action>(TextSearchAction)
nmap <leader>se <Action>(Find)
let g:WhichKeyDesc_search = "<leader>s Search"
let g:WhichKeyDesc_search_everywhere = "<leader>sS Search Everywhere"
let g:WhichKeyDesc_search_usages = "<leader>su Find Usages"
let g:WhichKeyDesc_search_nav_bar = "<leader>sn Show Nav Bar"
let g:WhichKeyDesc_search_action = "<leader>sa Search Action"
let g:WhichKeyDesc_search_class = "<leader>sc Search Class"
let g:WhichKeyDesc_search_file = "<leader>sf Search File"
let g:WhichKeyDesc_search_symbol = "<leader>ss Search Symbol"
let g:WhichKeyDesc_search_text = "<leader>st Search Text"
let g:WhichKeyDesc_search_text = "<leader>se Find Selected"

" Version Control
nmap <leader>Gc <Action>(Vcs.Show.Local.Changes)
nmap <leader>Gb <Action>(Git.Branches)
nmap <leader>Gf <Action>(Git.Fetch)
nmap <leader>Gp <Action>(Vcs.Push)
nmap <leader>GP <Action>(Git.Commit.And.Push.Executor)
nmap <leader>Go <Action>(Github.View.Pull.Request)
nmap <leader>Gm <Action>(VcsGroups)
nmap <leader>Gg <Action>(CheckinProject)
nmap <leader>Ga <Action>(Annotate)
nmap <leader>Gt <Action>(ActivateVersionControlToolWindow)
nmap <leader>Gr <Action>(Vcs.RollbackChangedLines)
nmap <leader>Gu <Action>(Vcs.UpdateProject)
let g:WhichKeyDesc_git = "<leader>G Git"
let g:WhichKeyDesc_git_checkin = "<leader>Gg Checkin"
let g:WhichKeyDesc_git_branches = "<leader>Gb Branches"
let g:WhichKeyDesc_git_push = "<leader>Gp Push"
let g:WhichKeyDesc_git_commit_and_push = "<leader>GP Commit & Push"
let g:WhichKeyDesc_git_menu = "<leader>Gm Menu"
let g:WhichKeyDesc_git_fetch = "<leader>Gf Fetch"
let g:WhichKeyDesc_git_annotate = "<leader>Ga Annotate"
let g:WhichKeyDesc_git_log = "<leader>Gl Log"
let g:WhichKeyDesc_git_tool = "<leader>Gt Tool"
let g:WhichKeyDesc_git_rollback_changed_lines = "<leader>Gr Rollback"
let g:WhichKeyDesc_git_open_pull_requests = "<leader>Go Open Pull Requests"
let g:WhichKeyDesc_git_local_changes = "<leader>Gc Show Local Changes"
let g:WhichKeyDesc_git_update_project = "<leader>Gu Update Project"

let g:WhichKeyDesc_easymotion = "<leader><leader> EasyMotion"

" History commands
nmap <leader>hh <Action>(Compare.SameVersion)
nmap <leader>hf <Action>(Vcs.ShowTabbedFileHistory)
vmap <leader>hg <Action>(Vcs.ShowHistoryForBlock)
nmap <leader>hd <Action>(Vcs.ShowDiff)
nmap <leader>hl <Action>(LocalHistory.ShowHistory)
vmap <leader>hs <Action>(LocalHistory.ShowSelectionHistory)
nmap <leader>hr <Action>(RecentChanges)
nmap <leader>hi <Action>(LocalHistory.PutLabel)
let g:WhichKeyDesc_History = "<leader>h git History"
let g:WhichKeyDesc_History = "<leader>hh git diff"
let g:WhichKeyDesc_History = "<leader>hf tabbed file history"
let g:WhichKeyDesc_git_history = "<leader>hg git history for selection"
let g:WhichKeyDesc_git_selection_history = "<leader>ht git selection history"
let g:WhichKeyDesc_git_selection_history = "<leader>hd git diff"

let g:WhichKeyDesc_local_history = "<leader>hl local history"
let g:WhichKeyDesc_selection_history = "<leader>hs local selection history"
let g:WhichKeyDesc_recent_changes = "<leader>hr recent changes"
let g:WhichKeyDesc_project_history = "<leader>hi label local history"

nmap K <Action>(ShowErrorDescription)
let g:WhichKeyDesc_ShowErrorDescription = "K ShowErrorDescription"



" inoremap jk <Esc>